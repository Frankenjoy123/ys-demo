package com.yunsoo.auth.api.controller;

import com.yunsoo.auth.Constants;
import com.yunsoo.auth.api.util.AuthUtils;
import com.yunsoo.auth.api.util.PageUtils;
import com.yunsoo.auth.dto.Device;
import com.yunsoo.auth.dto.DeviceRegisterRequest;
import com.yunsoo.auth.service.DeviceService;
import com.yunsoo.common.web.client.Page;
import com.yunsoo.common.web.exception.BadRequestException;
import com.yunsoo.common.web.exception.NotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PostAuthorize;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.util.List;

/**
 * Created by:   Lijian
 * Created on:   2016-07-25
 * Descriptions: device_id should be generated by client and unique globally.
 */
@RestController
@RequestMapping("/device")
public class DeviceController {

    @Autowired
    private DeviceService deviceService;

    @RequestMapping("{deviceId}")
    @PostAuthorize("hasPermission(returnObject, 'device:read')")
    public Device getById(@PathVariable("deviceId") String id) {
        Device device = deviceService.getById(id);
        if (device == null) {
            throw new NotFoundException("device not found by id: " + id);
        }

        return device;
    }

    @RequestMapping("")
    @PostAuthorize("hasPermission(returnObject, 'device:read')")
    public List<Device> getByFilter(@RequestParam(value = "org_id", required = false) String orgId,
                                    @RequestParam(value = "auth_account_id", required = false) String authAccountId,
                                    Pageable pageable,
                                    HttpServletResponse response) {
        orgId = AuthUtils.fixOrgId(orgId);

        Page<Device> page = deviceService.getByFilter(orgId, authAccountId, pageable);
        return PageUtils.response(response, page);
    }

    @RequestMapping(value = "register", method = RequestMethod.POST)
    @PreAuthorize("hasPermission('current', 'org', 'device:write')")
    public Device register(
            @RequestHeader(value = Constants.HttpHeaderName.APP_ID) String appId,
            @RequestHeader(value = Constants.HttpHeaderName.DEVICE_ID) String deviceId,
            @RequestBody DeviceRegisterRequest request) {
        if (deviceId.length() > 40) {
            throw new BadRequestException("DeviceId invalid");
        }
        Device device = new Device();
        device.setId(deviceId);
        device.setAppId(appId);
        device.setName(request.getName());
        device.setOs(request.getOs());
        device.setComments(request.getComments());
        return deviceService.register(device);
    }

    @RequestMapping(value = "{id}", method = RequestMethod.DELETE)
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void unregister(@PathVariable(value = "id") String id) {
        Device device = deviceService.getById(id);
        if (device != null) {
            AuthUtils.checkPermission(device.getOrgId(), "device", "delete");
            deviceService.unregister(id);
        }
    }

}
